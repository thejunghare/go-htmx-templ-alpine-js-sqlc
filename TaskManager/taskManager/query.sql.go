// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package taskManager

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaskAndReturnId = `-- name: CreateTaskAndReturnId :one
INSERT INTO tasks (name, created_at) VALUES ($1, $2)RETURNING id
`

type CreateTaskAndReturnIdParams struct {
	Name      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateTaskAndReturnId(ctx context.Context, arg CreateTaskAndReturnIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, createTaskAndReturnId, arg.Name, arg.CreatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const delete = `-- name: Delete :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAllTask = `-- name: GetAllTask :many
SELECT id, name, status, created_at FROM tasks
`

func (q *Queries) GetAllTask(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getAllTask)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT id, name, status, created_at FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE tasks SET status = $2
WHERE id = $1
`

type UpdateStatusParams struct {
	ID     int64
	Status bool
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateStatus, arg.ID, arg.Status)
	return err
}
